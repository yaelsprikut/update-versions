{"version":3,"sources":["transform.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","callNpmRegistryApi","event","a","get","package_name","then","response","push","data","results","package","name","version","catch","error","console","log","apiResponse","getLatestVersion","updatedDependencyObj","updatedDevDependencyObj","Object","entries","dependencies","forEach","key","devDependencies","App","useForm","register","handleSubmit","setValue","className","href","onSubmit","JSON","parse","w3review","updatedJson","inputFieldJson","Promise","resolve","reject","setTimeout","value","stringify","id","rows","cols","ref","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAMA,EAAQC,EAAQ,I,SAEPC,E,8EAAf,WAAkCC,GAAlC,eAAAC,EAAA,sEAE4BJ,EACvBK,IADuB,0CACkBF,EAAMG,eAC/CC,MAAK,SAAUC,GAMd,MALwB,GACRC,KAAhB,eACGD,EAASE,KAAKC,QAAQ,GAAGC,QACvBC,KAFL,WAEgBL,EAASE,KAAKC,QAAQ,GAAGC,QAAQE,WAE1CN,EAASE,KAAKC,QAAQ,GAAGC,QAAQE,WAEzCC,OAAM,SAAUC,GAEfC,QAAQC,IAAIF,MAEbT,MAAK,SAAUC,GAEd,OAAOA,KAlBb,cAEQW,EAFR,yBAqBSA,GArBT,4C,sBAwBO,SAASC,EAAiBjB,GAC7B,IAAMkB,EAAuB,GACvBC,EAA0B,GAWhC,OAVAC,OAAOC,QAAQrB,EAAMsB,cAAcC,QAAnC,iBAAAH,OAAA,IAAAA,CAAA,UAA2C,iCAAAnB,EAAA,gFAAQuB,EAAR,mBAClBzB,EAAmB,CAAEI,aAAcqB,IADjB,OACnCnB,EADmC,OAEzCa,EAAqBM,GAArB,WAAgCnB,GAFS,2CAA3C,uDAKAe,OAAOC,QAAQrB,EAAMyB,iBAAiBF,QAAtC,iBAAAH,OAAA,IAAAA,CAAA,UAA8C,iCAAAnB,EAAA,gFAAQuB,EAAR,mBACrBzB,EAAmB,CAAEI,aAAcqB,IADd,OACtCnB,EADsC,OAE5Cc,EAAwBK,GAAxB,WAAmCnB,GAFS,2CAA9C,uDAKO,CACLiB,aAAcJ,EACdO,gBAAiBN,K,yGCrCfF,EAAqBnB,EAAQ,IAA7BmB,iBA4EOS,MA1Ef,WAAgB,IAAD,EACgCC,cAArCC,EADK,EACLA,SAAUC,EADL,EACKA,aAAcC,EADnB,EACmBA,SAkChC,OACE,sBAAKC,UAAU,MAAf,UACE,oEACA,8BACE,+CACa,6CADb,2FAE4C,6CAAoB,IAFhE,0CAMF,4CACa,mBAAGC,KAAK,oBAAR,wBAEb,8BACE,iCACE,uBACA,uBAAMC,SAAUJ,GArCP,SAACtB,GAAU,IAAD,EACiB2B,KAAKC,MAAM5B,EAAK6B,UAAlDd,EADiB,EACjBA,aAAcG,EADG,EACHA,gBAChBY,EAAcpB,EAAiB,CACnCQ,kBACAH,iBAGIgB,EAAiBJ,KAAKC,MAAM5B,EAAK6B,iBAEhCE,EAAehB,oBACfgB,EAAeb,gBAEJ,IAAIc,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACTF,EAAQH,KACP,QAEKjC,MAAK,SAACuC,GACdb,EAAS,WAAYI,KAAKU,UAAUD,EAAO,KAAM,UAmB7C,UACE,0BACEZ,UAAU,cACVc,GAAG,WACHnC,KAAK,WACLoC,KAAK,KACLC,KAAK,MACLC,IAAKpB,EANP,qEAUA,uBACA,uBACA,wBAAQqB,KAAK,SAAb,oBACA,+BAIN,8EC/DSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6aec176d.chunk.js","sourcesContent":["const axios = require(\"axios\");\n\nasync function callNpmRegistryApi(event) {\n  // Make a request for a user with a given ID\n  const apiResponse = await axios\n    .get(`https://api.npms.io/v2/search\\?q\\=${event.package_name}`)\n    .then(function (response) {\n      const updateJsonArray = [];\n      updateJsonArray.push({\n        [response.data.results[0].package\n          .name]: `^${response.data.results[0].package.version}`,\n      });\n      return response.data.results[0].package.version;\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function (response) {\n      // always executed\n      return response;\n    });\n\n  return apiResponse;\n}\n\nexport function getLatestVersion(event) {\n    const updatedDependencyObj = {};\n    const updatedDevDependencyObj = {};\n    Object.entries(event.dependencies).forEach(async ([key, value]) => {\n      const response = await callNpmRegistryApi({ package_name: key });\n      updatedDependencyObj[key] = `^${response}`;\n    });\n\n    Object.entries(event.devDependencies).forEach(async ([key, value]) => {\n      const response = await callNpmRegistryApi({ package_name: key });\n      updatedDevDependencyObj[key] = `^${response}`;\n    });\n\n    return {\n      dependencies: updatedDependencyObj,\n      devDependencies: updatedDevDependencyObj,\n    };\n}","import React from \"react\";\n\nimport \"./App.css\";\nimport { useForm } from \"react-hook-form\";\nconst { getLatestVersion } = require(\"./transform.js\");\n\nfunction App() {\n  const { register, handleSubmit, setValue } = useForm();\n  // const [inputText, setInputText] = useState(\"This application is currently under construction. Please standby while I bleep bloop this into existence.\");\n  // parse JSON and return updated package.json (open raw in new tab)\n  // const handleSubmitInput = (input) => {\n  //   console.log(\"Handle me and return true or false!\");\n  // };\n\n  // if invalid package.json or other error\n  // const showMessageError = () => {};\n\n  // if package.json was updated successfully\n  // const showMessageSuccess = () => {};\n\n  const onSubmit = (data) => {\n    const { dependencies, devDependencies } = JSON.parse(data.w3review);\n    const updatedJson = getLatestVersion({\n      devDependencies,\n      dependencies,\n    });\n\n    const inputFieldJson = JSON.parse(data.w3review);\n\n    delete inputFieldJson.dependencies;\n    delete inputFieldJson.devDependencies;\n\n    const myPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(updatedJson);\n      }, 1000);\n    });\n    myPromise.then((value) => {\n      setValue(\"w3review\", JSON.stringify(value, null, 4));\n    });\n  };\n  return (\n    <div className=\"App\">\n      <p>Update your package.json libraries!</p>\n      <pre>\n        <code>\n          Paste your <b>package.json</b> below and click update to ðŸŒŸ\n          &nbsp;auto-magically&nbsp; ðŸŒŸ update your <b>package.json</b>{\" \"}\n          libraries to their latest version.\n        </code>\n      </pre>\n      <p>\n        created by <a href=\"http://yael.codes\">yael.co</a>\n      </p>\n      <pre>\n        <code>\n          <br />\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <textarea\n              className=\"code-editor\"\n              id=\"w3review\"\n              name=\"w3review\"\n              rows=\"29\"\n              cols=\"100\"\n              ref={register}\n            >\n              Paste your package.json to get the latest npm packages!\n            </textarea>\n            <br />\n            <br />\n            <button type=\"submit\">Update</button>\n            <br />\n          </form>\n        </code>\n      </pre>\n      <p>*classical music plays in the background*</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}